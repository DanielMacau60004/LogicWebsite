/* tslint:disable */
/* eslint-disable */
/**
 * Logic Tool
 * API for managing the Logic Tool
 *
 * The version of the OpenAPI document: 1.0
 * Contact: dmacau@campus.fct.unl.pt
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Pageable,
} from '../models/index';
import {
    PageableFromJSON,
    PageableToJSON,
} from '../models/index';

export interface GetFOLProblemRequest {
    problemNum: number;
}

export interface GetFOLProblemsRequest {
    pageable: Pageable;
}

export interface GetPLProblemRequest {
    problemNum: number;
}

export interface GetPLProblemsRequest {
    pageable: Pageable;
}

export interface VerifyFOLProblemRequest {
    problemNum: number;
    body: string;
}

export interface VerifyGeneralFOLProblemRequest {
    body: string;
}

export interface VerifyGeneralPLProblemRequest {
    body: string;
}

export interface VerifyPLProblemRequest {
    problemNum: number;
    body: string;
}

/**
 * 
 */
export class NdProofsControllerApi extends runtime.BaseAPI {

    /**
     */
    async getFOLProblemRaw(requestParameters: GetFOLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['problemNum'] == null) {
            throw new runtime.RequiredError(
                'problemNum',
                'Required parameter "problemNum" was null or undefined when calling getFOLProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nd/fol/problem/{problemNum}`.replace(`{${"problemNum"}}`, encodeURIComponent(String(requestParameters['problemNum']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getFOLProblem(requestParameters: GetFOLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getFOLProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFOLProblemsRaw(requestParameters: GetFOLProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getFOLProblems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nd/fol/problem`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getFOLProblems(requestParameters: GetFOLProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getFOLProblemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPLProblemRaw(requestParameters: GetPLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['problemNum'] == null) {
            throw new runtime.RequiredError(
                'problemNum',
                'Required parameter "problemNum" was null or undefined when calling getPLProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nd/pl/problem/{problemNum}`.replace(`{${"problemNum"}}`, encodeURIComponent(String(requestParameters['problemNum']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getPLProblem(requestParameters: GetPLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPLProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPLProblemsRaw(requestParameters: GetPLProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling getPLProblems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nd/pl/problem`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getPLProblems(requestParameters: GetPLProblemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPLProblemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifyFOLProblemRaw(requestParameters: VerifyFOLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['problemNum'] == null) {
            throw new runtime.RequiredError(
                'problemNum',
                'Required parameter "problemNum" was null or undefined when calling verifyFOLProblem().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling verifyFOLProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nd/fol/problem/{problemNum}`.replace(`{${"problemNum"}}`, encodeURIComponent(String(requestParameters['problemNum']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async verifyFOLProblem(requestParameters: VerifyFOLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.verifyFOLProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifyGeneralFOLProblemRaw(requestParameters: VerifyGeneralFOLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling verifyGeneralFOLProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nd/fol`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async verifyGeneralFOLProblem(requestParameters: VerifyGeneralFOLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.verifyGeneralFOLProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifyGeneralPLProblemRaw(requestParameters: VerifyGeneralPLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling verifyGeneralPLProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nd/pl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async verifyGeneralPLProblem(requestParameters: VerifyGeneralPLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.verifyGeneralPLProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifyPLProblemRaw(requestParameters: VerifyPLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['problemNum'] == null) {
            throw new runtime.RequiredError(
                'problemNum',
                'Required parameter "problemNum" was null or undefined when calling verifyPLProblem().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling verifyPLProblem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nd/pl/problem/{problemNum}`.replace(`{${"problemNum"}}`, encodeURIComponent(String(requestParameters['problemNum']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async verifyPLProblem(requestParameters: VerifyPLProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.verifyPLProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
