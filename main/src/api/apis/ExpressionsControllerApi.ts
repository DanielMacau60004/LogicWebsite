/* tslint:disable */
/* eslint-disable */
/**
 * Logic Tool
 * API for managing the Logic Tool
 *
 * The version of the OpenAPI document: 1.0
 * Contact: dmacau@campus.fct.unl.pt
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface VerifyFOLExpressionRequest {
    level: VerifyFOLExpressionLevelEnum;
    body: string;
}

export interface VerifyPLExpressionRequest {
    level: VerifyPLExpressionLevelEnum;
    body: string;
}

/**
 * 
 */
export class ExpressionsControllerApi extends runtime.BaseAPI {

    /**
     */
    async verifyFOLExpressionRaw(requestParameters: VerifyFOLExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling verifyFOLExpression.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling verifyFOLExpression.');
        }

        const queryParameters: any = {};

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exp/fol`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async verifyFOLExpression(requestParameters: VerifyFOLExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.verifyFOLExpressionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async verifyPLExpressionRaw(requestParameters: VerifyPLExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.level === null || requestParameters.level === undefined) {
            throw new runtime.RequiredError('level','Required parameter requestParameters.level was null or undefined when calling verifyPLExpression.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling verifyPLExpression.');
        }

        const queryParameters: any = {};

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/exp/pl`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async verifyPLExpression(requestParameters: VerifyPLExpressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.verifyPLExpressionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const VerifyFOLExpressionLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Solution: 'SOLUTION'
} as const;
export type VerifyFOLExpressionLevelEnum = typeof VerifyFOLExpressionLevelEnum[keyof typeof VerifyFOLExpressionLevelEnum];
/**
 * @export
 */
export const VerifyPLExpressionLevelEnum = {
    None: 'NONE',
    Low: 'LOW',
    Medium: 'MEDIUM',
    High: 'HIGH',
    Solution: 'SOLUTION'
} as const;
export type VerifyPLExpressionLevelEnum = typeof VerifyPLExpressionLevelEnum[keyof typeof VerifyPLExpressionLevelEnum];
