/* tslint:disable */
/* eslint-disable */
/**
 * Logic Tool
 * API for managing the Logic Tool
 *
 * The version of the OpenAPI document: 1.0
 * Contact: dmacau@campus.fct.unl.pt
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExpComponent } from './ExpComponent';
import {
    ExpComponentFromJSON,
    ExpComponentFromJSONTyped,
    ExpComponentToJSON,
} from './ExpComponent';
import type { MarkComponent } from './MarkComponent';
import {
    MarkComponentFromJSON,
    MarkComponentFromJSONTyped,
    MarkComponentToJSON,
} from './MarkComponent';
import type { RuleComponent } from './RuleComponent';
import {
    RuleComponentFromJSON,
    RuleComponentFromJSONTyped,
    RuleComponentToJSON,
} from './RuleComponent';

/**
 * 
 * @export
 * @interface TreeComponent
 */
export interface TreeComponent {
    /**
     * 
     * @type {string}
     * @memberof TreeComponent
     */
    type?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof TreeComponent
     */
    errors?: { [key: string]: any; } | null;
    /**
     * 
     * @type {ExpComponent}
     * @memberof TreeComponent
     */
    conclusion?: ExpComponent;
    /**
     * 
     * @type {Array<MarkComponent>}
     * @memberof TreeComponent
     */
    marks?: Array<MarkComponent>;
    /**
     * 
     * @type {RuleComponent}
     * @memberof TreeComponent
     */
    rule?: RuleComponent;
    /**
     * 
     * @type {any}
     * @memberof TreeComponent
     */
    hypotheses?: any | null;
}

/**
 * Check if a given object implements the TreeComponent interface.
 */
export function instanceOfTreeComponent(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TreeComponentFromJSON(json: any): TreeComponent {
    return TreeComponentFromJSONTyped(json, false);
}

export function TreeComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): TreeComponent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'errors': !exists(json, 'errors') ? undefined : json['errors'],
        'conclusion': !exists(json, 'conclusion') ? undefined : ExpComponentFromJSON(json['conclusion']),
        'marks': !exists(json, 'marks') ? undefined : ((json['marks'] as Array<any>).map(MarkComponentFromJSON)),
        'rule': !exists(json, 'rule') ? undefined : RuleComponentFromJSON(json['rule']),
        'hypotheses': !exists(json, 'hypotheses') ? undefined : json['hypotheses'],
    };
}

export function TreeComponentToJSON(value?: TreeComponent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'errors': value.errors,
        'conclusion': ExpComponentToJSON(value.conclusion),
        'marks': value.marks === undefined ? undefined : ((value.marks as Array<any>).map(MarkComponentToJSON)),
        'rule': RuleComponentToJSON(value.rule),
        'hypotheses': value.hypotheses,
    };
}

