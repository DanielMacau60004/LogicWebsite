options {
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*;
import ast.logic.ASTLiteral;import ast.types.*;
import ast.logic.*;

public class Parser {
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| <ENTER: "\n">
| <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n") >
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN :
{
  < BOOL: "bool">
  |
  < UNIT: "unit">
}

TOKEN :
{
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < CMP: "==" >
  |
  < NOT: "~" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < DIFF: "!=" >
  |
  <SEMICOLON : ";">
  |
  <IMPLICATION: "->">
  |
  <EQUIVALENT: "<=>">
  |
  <MODELS: "|=">
  |
  <LEFT_BRACKET: "{">
  |
  <RIGHT_BRACKET: "}">
  |
  <COMMA: ",">
  |
  < LITERAL: ["a"-"z"] >
  |
  < TEXT : "\"" ( ~["\"", "\\"] | "\\" ["\"", "\\"] )* "\"" >
}

Exp Start():
{ Exp e; }
{
   e = Sequences() <EOF>
   {return e;}
}

Exp Sequences():
{ ASTSequence exps; Exp e; }
{
   e = Cmp() <SEMICOLON> {exps = new ASTSequence(e);} ( e = Cmp() <SEMICOLON> {exps.addExp(e);})*
   {return exps;}
}

Exp Cmp() :
{ Token t; Exp e1, e2, e3; ASTKnowledgeBase kb = new ASTKnowledgeBase(); }
{

   <LEFT_BRACKET> e1 = Pred() {kb.addExp(e1);} (<COMMA> e2 = Pred() {kb.addExp(e2);})*
   <RIGHT_BRACKET> t = <MODELS> e3 = Pred() {return new ASTModels(t, kb, e3);}|
   e1 = Pred() (t = <EQUIVALENT> e2 = Pred() {e1 = new ASTEquivalence(t,e1,e2);})*
   { return e1; }
}

Exp Pred() :
{ Token t; Exp e1, e2; }
{
   e1 = Fact()
   (
       t =<AND> e2 = Fact() {e1 = new ASTAnd(t, e1,e2);}
       | t = <OR> e2 = Fact() {e1 = new ASTOr(t, e1,e2);}
       | t = <IMPLICATION> e2 = Fact() {e1 = new ASTImplication(t,e1,e2);}
   )*
   { return e1; }

}

Exp Fact() :
{ Token t;  Exp e;}
{
 t = <TRUE> { return new ASTBool(t, true); }
 | t = <FALSE> { return new ASTBool(t, false); }
 | t = <NOT> e = Fact() {return new ASTNot(t, e);}
 | <LPAR> e = Pred() <RPAR> {return e;}
 | t = <LITERAL> {return new ASTLiteral(t, token.image);}
}


